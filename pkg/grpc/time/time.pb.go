// Code generated by protoc-gen-go. DO NOT EDIT.
// source: time.proto

package time

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetCurrentTimeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCurrentTimeRequest) Reset()         { *m = GetCurrentTimeRequest{} }
func (m *GetCurrentTimeRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrentTimeRequest) ProtoMessage()    {}
func (*GetCurrentTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49a92d779a28c7fd, []int{0}
}

func (m *GetCurrentTimeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCurrentTimeRequest.Unmarshal(m, b)
}
func (m *GetCurrentTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCurrentTimeRequest.Marshal(b, m, deterministic)
}
func (m *GetCurrentTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentTimeRequest.Merge(m, src)
}
func (m *GetCurrentTimeRequest) XXX_Size() int {
	return xxx_messageInfo_GetCurrentTimeRequest.Size(m)
}
func (m *GetCurrentTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentTimeRequest proto.InternalMessageInfo

type GetCurrentTimeResponse struct {
	Time                 string   `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCurrentTimeResponse) Reset()         { *m = GetCurrentTimeResponse{} }
func (m *GetCurrentTimeResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrentTimeResponse) ProtoMessage()    {}
func (*GetCurrentTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49a92d779a28c7fd, []int{1}
}

func (m *GetCurrentTimeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCurrentTimeResponse.Unmarshal(m, b)
}
func (m *GetCurrentTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCurrentTimeResponse.Marshal(b, m, deterministic)
}
func (m *GetCurrentTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentTimeResponse.Merge(m, src)
}
func (m *GetCurrentTimeResponse) XXX_Size() int {
	return xxx_messageInfo_GetCurrentTimeResponse.Size(m)
}
func (m *GetCurrentTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentTimeResponse proto.InternalMessageInfo

func (m *GetCurrentTimeResponse) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func init() {
	proto.RegisterType((*GetCurrentTimeRequest)(nil), "time.v1.GetCurrentTimeRequest")
	proto.RegisterType((*GetCurrentTimeResponse)(nil), "time.v1.GetCurrentTimeResponse")
}

func init() { proto.RegisterFile("time.proto", fileDescriptor_49a92d779a28c7fd) }

var fileDescriptor_49a92d779a28c7fd = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xc9, 0xcc, 0x4d,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x07, 0xb3, 0xcb, 0x0c, 0x95, 0xc4, 0xb9, 0x44,
	0xdd, 0x53, 0x4b, 0x9c, 0x4b, 0x8b, 0x8a, 0x52, 0xf3, 0x4a, 0x42, 0x32, 0x73, 0x53, 0x83, 0x52,
	0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x94, 0x74, 0xb8, 0xc4, 0xd0, 0x25, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a,
	0x53, 0x85, 0x84, 0xb8, 0x58, 0x40, 0xba, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c,
	0xa3, 0x18, 0x2e, 0x56, 0x90, 0x9a, 0x22, 0xa1, 0x60, 0x2e, 0x3e, 0x54, 0x6d, 0x42, 0x72, 0x7a,
	0x50, 0xbb, 0xf4, 0xb0, 0x5a, 0x24, 0x25, 0x8f, 0x53, 0x1e, 0x62, 0x9f, 0x12, 0x83, 0x13, 0x5b,
	0x14, 0xd8, 0x96, 0x24, 0x36, 0xb0, 0xe3, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xd3,
	0xf8, 0x7b, 0xca, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TimerClient is the client API for Timer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimerClient interface {
	GetCurrentTime(ctx context.Context, in *GetCurrentTimeRequest, opts ...grpc.CallOption) (*GetCurrentTimeResponse, error)
}

type timerClient struct {
	cc *grpc.ClientConn
}

func NewTimerClient(cc *grpc.ClientConn) TimerClient {
	return &timerClient{cc}
}

func (c *timerClient) GetCurrentTime(ctx context.Context, in *GetCurrentTimeRequest, opts ...grpc.CallOption) (*GetCurrentTimeResponse, error) {
	out := new(GetCurrentTimeResponse)
	err := c.cc.Invoke(ctx, "/time.v1.Timer/GetCurrentTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimerServer is the server API for Timer service.
type TimerServer interface {
	GetCurrentTime(context.Context, *GetCurrentTimeRequest) (*GetCurrentTimeResponse, error)
}

func RegisterTimerServer(s *grpc.Server, srv TimerServer) {
	s.RegisterService(&_Timer_serviceDesc, srv)
}

func _Timer_GetCurrentTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServer).GetCurrentTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/time.v1.Timer/GetCurrentTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServer).GetCurrentTime(ctx, req.(*GetCurrentTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Timer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "time.v1.Timer",
	HandlerType: (*TimerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentTime",
			Handler:    _Timer_GetCurrentTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "time.proto",
}
